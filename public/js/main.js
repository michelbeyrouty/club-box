// Defining some global utility letiables
let isRemotePeerAvailble = false;
let isRoomCreated = false;
let isPeerConnectionCreated = false;
let localStream;
let remoteStream;
let peerConnection;

// Set local stream constraints
const localStreamConstraints = {
  audio: true,
  video: true,
};

// Prompting for room name:
const room = prompt('Enter room name:');

// Initializing socket.io
const socket = io.connect();

// Create room when name is added
if (room !== '') {
  socket.emit('create or join', room);
}

// Fetch video containers
const localVideo = document.querySelector('#localVideo');
const localUser = document.querySelector('#localUser');
const remoteVideo = document.querySelector('#remoteVideo');

// Get access to Microphone/Camera
navigator.mediaDevices.getUserMedia(localStreamConstraints)
.then(addLocalStream)
.catch((e) => {
  alert('getUserMedia() error: ' + e.name);
});


// Add local stream to local container
function addLocalStream (stream) {
  localStream = stream;
  localVideo.srcObject = stream;
  sendMessage('Got user media in room:', room);
  if (isRoomCreated) {
    startStream();
  }
}

// If Room Initiated, create the peer connection
function startStream () {
  if (!isPeerConnectionCreated && localStream && isRemotePeerAvailble) {
    createPeerConnection();
    peerConnection.addStream(localStream);
    isPeerConnectionCreated = true;
    if (isRoomCreated) {
      createOffer();
    }
  }
}

// Function to create offer
function createOffer () {
  peerConnection.createOffer(setLocalAndSendMessage, (error) =>{
    console.log('createOffer() error: ', error);
  });
}

// Sending bye if user closes the window
window.onbeforeunload = function () {
  sendMessage('left', room);
};


// Function to create answer for the received offer
function createAnswer () {
  console.log('Sending answer to peer.');
  peerConnection.createAnswer().then(
    setLocalAndSendMessage,
    (error) => console.log(error.toString()),
  );
}

// Function to set description of local media
function setLocalAndSendMessage (sessionDescription) {
  peerConnection.setLocalDescription(sessionDescription);
  console.log('setLocalAndSendMessage sending message', sessionDescription);
  sendMessage(sessionDescription, room);
}

function handleRemoteHangup () {
  console.log('Session terminated.');
  stop();
  isRoomCreated = false;
}

function stop () {
  isPeerConnectionCreated = false;
  peerConnection.close();
  peerConnection = null;
}


// Socket listeners
// Called when creating the room
socket.on('created', () => {
  isRoomCreated = true;
});

// Event - Room is full
socket.on('full', (room) => {
  console.log('Room ' + room + ' is full');
});

// Event - Another client tries to join room
socket.on('join', (room)=>  {
  console.log('A new peer made a request to join room ' + room);
  isRemotePeerAvailble = true;
});

// Event - Client has joined the room
socket.on('joined', (room) => {
  console.log('joined: ' + room);
  isRemotePeerAvailble = true;
});


// Event - server asks to log a message
socket.on('log', (array) => {
  console.log.apply(console, array);
});


// Event - for sending meta for establishing a direct connection using WebRTC
// The Driver code
socket.on('message', (message, room) => {
  console.log('Client received message:', message,  room);
  if (message === 'Got user media in room:') {
    startStream();
  } else if (message.type === 'offer') {
    if (!isRoomCreated && !isPeerConnectionCreated) {
      startStream();
    }
    peerConnection.setRemoteDescription(new RTCSessionDescription(message));
    createAnswer();
  } else if (message.type === 'answer' && isPeerConnectionCreated) {
    peerConnection.setRemoteDescription(new RTCSessionDescription(message));
  } else if (message.type === 'candidate' && isPeerConnectionCreated) {
    const candidate = new RTCIceCandidate({
      sdpMLineIndex: message.label,
      candidate:     message.candidate,
    });
    peerConnection.addIceCandidate(candidate);
  } else if (message === 'left' && isPeerConnectionCreated) {
    handleRemoteHangup();
  }
});


// Function to send message in a room
function sendMessage (message, room) {
  console.log('Client sending message: ', message, room);
  socket.emit('message', message, room);
}


// I- Create Peer Connection Object
//

const peerConnectionConfig = turnConfig; // Defined in public/js/config.js

function createPeerConnection () {
  try {
    peerConnection = new RTCPeerConnection(peerConnectionConfig);
    peerConnection.onicecandidate = handleIceCandidate;
    peerConnection.onaddstream = handleRemoteStreamAdded;
    peerConnection.onremovestream = handleRemoteStreamRemoved;
    console.log('Created RTCPeerConnnection');
  } catch (e) {
    console.log('Failed to create PeerConnection, exception: ' + e.message);
    return;
  }
}

// Function to handle Ice candidates generated by the browser
function handleIceCandidate (event) {
  console.log('icecandidate event: ', event);
  if (event.candidate) {
    sendMessage({
      type:      'candidate',
      label:     event.candidate.sdpMLineIndex,
      id:        event.candidate.sdpMid,
      candidate: event.candidate.candidate,
    }, room);
  } else {
    console.log('End of candidates.');
  }
}

// Function to play remote stream as soon as this client receives it
function handleRemoteStreamAdded (event) {
  console.log('Remote stream added.');
  remoteStream = event.stream;

  remoteVideo.srcObject = remoteStream;
}

function handleRemoteStreamRemoved (event) {
  console.log('Remote stream removed. Event: ', event);
}
